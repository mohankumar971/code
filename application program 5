#include <stdio.h>
#include <stdlib.h>
#include <limits.h>

// Structure to represent an edge in the graph
struct Edge {
    int source, destination, weight;
};

// Structure to represent the graph
struct Graph {
    int V; // Number of vertices
    int E; // Number of edges
    struct Edge* edge;
};

// Function to create a graph with V vertices and E edges
struct Graph* createGraph(int V, int E) {
    struct Graph* graph = (struct Graph*)malloc(sizeof(struct Graph));
    graph->V = V;
    graph->E = E;
    graph->edge = (struct Edge*)malloc(E * sizeof(struct Edge));
    return graph;
}

// Function to perform Bellman-Ford algorithm to find shortest paths
void BellmanFord(struct Graph* graph, int source) {
    int V = graph->V;
    int E = graph->E;
    int* dist = (int*)malloc(V * sizeof(int));

    // Initialize distances to all vertices as INFINITE
    for (int i = 0; i < V; i++)
        dist[i] = INT_MAX;
    dist[source] = 0;

    // Relax all edges |V| - 1 times
    for (int i = 1; i <= V - 1; i++) {
        for (int j = 0; j < E; j++) {
            int u = graph->edge[j].source;
            int v = graph->edge[j].destination;
            int weight = graph->edge[j].weight;
            if (dist[u] != INT_MAX && dist[u] + weight < dist[v])
                dist[v] = dist[u] + weight;
        }
    }

    // Check for negative-weight cycles
    for (int i = 0; i < E; i++) {
        int u = graph->edge[i].source;
        int v = graph->edge[i].destination;
        int weight = graph->edge[i].weight;
        if (dist[u] != INT_MAX && dist[u] + weight < dist[v]) {
            printf("Graph contains negative weight cycle, cannot find shortest paths\n");
            return;
        }
    }

    // Print the shortest distances from the source
    printf("Shortest distances from source %d:\n", source);
    for (int i = 0; i < V; i++) {
        if (dist[i] == INT_MAX)
            printf("Vertex %d: INF\n", i);
        else
            printf("Vertex %d: %d\n", i, dist[i]);
    }

    free(dist);
}

int main() {
    int V = 5; // Number of cities (vertices)
    int E = 8; // Number of roads (edges)
    struct Graph* graph = createGraph(V, E);

    // Add edges (roads) with their weights (distances)
    graph->edge[0].source = 0; graph->edge[0].destination = 1; graph->edge[0].weight = 2;
    graph->edge[1].source = 0; graph->edge[1].destination = 2; graph->edge[1].weight = 4;
    graph->edge[2].source = 1; graph->edge[2].destination = 2; graph->edge[2].weight = 1;
    graph->edge[3].source = 1; graph->edge[3].destination = 3; graph->edge[3].weight = 7;
    graph->edge[4].source = 2; graph->edge[4].destination = 3; graph->edge[4].weight = 3;
    graph->edge[5].source = 3; graph->edge[5].destination = 4; graph->edge[5].weight = 2;
    graph->edge[6].source = 4; graph->edge[6].destination = 
