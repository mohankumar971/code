#include <stdio.h>
#include <stdbool.h>
#include <string.h>
#include <limits.h>

// Define the number of routers (nodes) in the network
#define V 6

// Function to find the minimum of two values
int min(int a, int b) {
    return (a < b) ? a : b;
}

// Breadth-First Search (BFS) to find augmenting path in residual graph
bool bfs(int residualGraph[V][V], int source, int sink, int parent[]) {
    bool visited[V];
    memset(visited, 0, sizeof(visited));

    visited[source] = true;
    parent[source] = -1;

    // Create a queue for BFS
    int queue[V];
    int front = 0, rear = 0;
    queue[rear++] = source;

    while (front != rear) {
        int u = queue[front++];
        for (int v = 0; v < V; v++) {
            if (!visited[v] && residualGraph[u][v] > 0) {
                queue[rear++] = v;
                parent[v] = u;
                visited[v] = true;
            }
        }
    }

    // If we reached the sink node in BFS, then there is an augmenting path
    return visited[sink];
}

// Ford-Fulkerson algorithm to find the maximum flow
int fordFulkerson(int graph[V][V], int source, int sink) {
    int u, v;

    // Create a residual graph and initialize it with the original capacities
    int residualGraph[V][V];
    for (u = 0; u < V; u++) {
        for (v = 0; v < V; v++) {
            residualGraph[u][v] = graph[u][v];
        }
    }

    int parent[V]; // Store the augmented path

    int maxFlow = 0;

    // Augment the flow while there is an augmenting path
    while (bfs(residualGraph, source, sink, parent)) {
        int pathFlow = INT_MAX;
        for (v = sink; v != source; v = parent[v]) {
            u = parent[v];
            pathFlow = min(pathFlow, residualGraph[u][v]);
        }

        // Update residual capacities
        for (v = sink; v != source; v = parent[v]) {
            u = parent[v];
            residualGraph[u][v] -= pathFlow;
            residualGraph[v][u] += pathFlow;
        }

        maxFlow += pathFlow;
    }

    return maxFlow;
}

int main() {
    int graph[V][V] = {
        {0, 16, 13, 0, 0, 0},
        {0, 0, 10, 12, 0, 0},
        {0, 4, 0, 0, 14, 0},
        {0, 0, 9, 0, 0, 20},
        {0, 0, 0, 7, 0, 4},
        {0, 0, 0, 0, 0, 0}
    };

    int source = 3; // Source router
    int sink = 5;   // Destination router

    int maxFlow = fordFulkerson(graph, source, sink);

    printf("Maximum Flow from Router %d to Router %d: %d\n", source, sink, maxFlow);

    return 0;
}
