#include <stdio.h>
#include <stdlib.h>
#include <limits.h>

#define MAX_VERTICES 100
#define MAX_EDGES 100

struct Edge {
    int source, destination, weight;
};

struct Graph {
    int V, E;
    struct Edge edges[MAX_EDGES];
};

void initializeGraph(struct Graph* graph, int V, int E) {
    graph->V = V;
    graph->E = E;
}

int bellmanFord(struct Graph* graph, int source) {
    int distances[MAX_VERTICES];
    int parent[MAX_VERTICES];

    for (int i = 0; i < graph->V; i++) {
        distances[i] = INT_MAX;
        parent[i] = -1;
    }

    distances[source] = 0;

    for (int i = 0; i < graph->V - 1; i++) {
        for (int j = 0; j < graph->E; j++) {
            int u = graph->edges[j].source;
            int v = graph->edges[j].destination;
            int weight = graph->edges[j].weight;
            if (distances[u] != INT_MAX && distances[u] + weight < distances[v]) {
                distances[v] = distances[u] + weight;
                parent[v] = u;
            }
        }
    }

    for (int i = 0; i < graph->E; i++) {
        int u = graph->edges[i].source;
        int v = graph->edges[i].destination;
        int weight = graph->edges[i].weight;
        if (distances[u] != INT_MAX && distances[u] + weight < distances[v]) {
            return 0;  // Negative weight cycle detected
        }
    }

    // Print shortest paths from source to all vertices
    printf("Shortest distances from the source vertex %d:\n", source);
    for (int i = 0; i < graph->V; i++) {
        printf("Vertex %d: Distance = %d, Parent = %d\n", i, distances[i], parent[i]);
    }

    return 1; // No negative weight cycle detected
}

int main() {
    struct Graph graph;
    int V, E, source;

    printf("Enter the number of vertices and edges: ");
    scanf("%d %d", &V, &E);

    initializeGraph(&graph, V, E);

    printf("Enter the edges (source, destination, weight):\n");
    for (int i = 0; i < E; i++) {
        scanf("%d %d %d", &graph.edges[i].source, &graph.edges[i].destination, &graph.edges[i].weight);
    }

    printf("Enter the source vertex: ");
    scanf("%d", &source);

    if (!bellmanFord(&graph, source)) {
        printf("Negative weight cycle detected. The algorithm cannot proceed.\n");
    }

    return 0;
}
